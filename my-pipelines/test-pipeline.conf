
input {
  beats {
    port => "5045"
  }
}

filter {

  # store un-parsed message in raw_message for testing. Save IP address.
  mutate {
      copy => {"[@metadata][ip_address]" => "[beat][ip_address]"}
      copy => { "message" => "raw_message" }
  }
  
  if [source] != 'syslog' {
    # set log file name as source instead of full path
    grok {
            match => { "source" => "^(.+)\/(?<source>[^\/]+)$" }
            overwrite => [ "source" ]
    }
  }

  # determine log type and set up index routing
  if [source] == 'syslog' {
    mutate {
      add_field => { "log_type" => "syslog" }
      add_field => { "idx_name" => "syslog" }
    }
  }
  if [source] == 'assetpuller.log' or [source] == 'cmspuller.log' or [source] == 'fsplayer.log' {
    mutate {
      add_field => { "log_type" => "nuberlog" }
      add_field => { "idx_name" => "nuberlog" }
    }
  }
  else if [source] == 'bsp.log' {
    mutate {
      add_field => { "log_type" => "broadsign" }
      add_field => { "idx_name" => "nuberlog" }
    }
  }
  else if [source] =~ /status_[\d_]*\.log$/ {
    mutate {
      add_field => { "log_type" => "status" }
      add_field => { "idx_name" => "status" }
    }
  }
  else {
    mutate {
      add_tag => [ "_indeterminatelogtype" ]
    }
  }

  # process nuberlogs
  if [log_type] == "nuberlog" {
    # Check if JSON found, if so parse it then remove it
    if [message] =~ /(?m)\{\s+?\"[\w\d]+\"\s*?:\s*?\{.*\}/ {
      grok {
        # matches json starting with curly bracket, whitespace, quote, words/digits, quote, colon. Quotes are escaped.
            match => { "message" => "\A(?<message>[^\{]+)\s+?(?m)(?<json>(\{\s*\"[\w\d]+\":\s*.*\}))" }
            overwrite => [ "message" ]
        }
      json {
        source => "json"
        target => "dynamic_json_field"
      }
      mutate {
        gsub => [ "message", "(?m).*?(\{.+\})", "" ]
        remove_field => [ "json" ]
        add_tag => [ "json" ]
        }
    }

    # Continue processing nuberlog minus json.
    grok {
      match => { "message" => "(?<ts>%{YEAR}-%{MONTHNUM}-%{MONTHDAY} %{HOUR}:?%{MINUTE}.(?<sec>[0-5]?[0-9]|60)[:.,](?<ms>[0-9]+)) +\[%{LOGLEVEL:loglevel}\] (?<filename>.+?(?=@))@(?<line_number>(?<=@)[0-9]*) (?<function>\S*) (?m)%{GREEDYDATA:message}" }
              overwrite => [ "message" ]
    }
    # Get player key
    if [message] =~ /Setting player key to:/ {
      grok {
        match => { "message" => "Setting player key to: %{WORD:player_key}" }
      }
    }

    mutate {
      # remove last 3 characters from nanoseconds
      gsub => [ "ts", ".{3}$", "" ]
      convert => {
        "ms" => "integer"
      }
      #add_tag => [ "%{function}", "%{filename}@%{line_number}", "%{loglevel}" ]
      #remove_field => [ "ts", "sec" ]
    }
    date {
      match => [ "ts", "yyyy-MM-dd HH:mm:ss.SSS" ]
    }
  }
  # Now that function field is populated, change root JSON object to function name.
  if [dynamic_json_field] {
    mutate {
      rename => { "dynamic_json_field" => "%{function}" }
    }
  }

  # process Broadsign logs
  if [log_type] == "broadsign" {
    mutate {
      replace => { "[fields][log]" => "broadsign" }
    }
    grok {
      match => { "message" => "^\[?%{TIMESTAMP_ISO8601:ts}\]?\(message\)[| ]+%{GREEDYDATA:message}$" }
      overwrite => [ "message" ]
    }
    date {
      match => [ "ts", "ISO8601" ]
    }
    mutate {
        remove_field => [ "ts" ]
    }
  }
  
  # process status messages
  if [log_type] == "status" {
    grok {
      match => { "message" => "[\\d_]* +%{GREEDYDATA:json}" }
    }
    json {
      source => "json"
      target => "dynamic_json_field"
    }
    mutate {
      replace => { "[fields][log]" => "status" }
      replace => { "message" => "status_update" }
      rename =>  { "dynamic_json_field" => "%{[fields][type]}-status" }
      remove_field => [ "json" ]
    }
  }

  # remove silly default field
  if "beats_input_codec_plain_applied" in [tags] {
    mutate {
        remove_tag => ["beats_input_codec_plain_applied"]
    }
  }
}

output {
  stdout { codec => rubydebug }
  
}
